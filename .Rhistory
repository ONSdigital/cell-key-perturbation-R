aggregated_table$pcv<-as.integer(((aggregated_table$pre_sdc_count-1)%%250)+501)
setDT(aggregated_table)[pre_sdc_count<=750, pcv:=pre_sdc_count,]
#merge on ptable
aggregated_table<-merge(aggregated_table,ptable,by=c("ckey","pcv"),sort=FALSE,all.x=TRUE)
setDT(aggregated_table)[,count:=pre_sdc_count+pvalue,]
#replacing NAs in cellkey for zero cells
aggregated_table[pre_sdc_count==0,ckey:=0]
#setting pvalue to be zero for zero cells
aggregated_table[pre_sdc_count==0,pvalue:=0]
#setting count to be zero for zero cells
aggregated_table[pre_sdc_count==0,count:=0]
return(aggregated_table)
}
result <- create_perturbed_table(data = micro,
geog = c("var1"),
tab_vars = c(),
record_key_arg = "record_key",
ptable = ptable_10_5)
result <- create_perturbed_table(data = micro,
geog = c("var1"),
tab_vars = c("var5"),
record_key_arg = "record_key",
ptable = ptable_10_5)
result <- create_perturbed_table(data = micro,
geog = c("var1"),
tab_vars = c("var5"),
record_key_arg = "record_key",
ptable = ptable_10_5)
library(data.table)
#' Create a frequency table with cell key perturbation applied
#'
#' 'create_perturbed_table()' creates a frequency table which has had
#'  cell key perturbation applied to the counts.
#'  A p-table file needs to be supplied which determines which cells are
#'  perturbed.
#'  The data needs to contain a 'record key' variable which along with the
#'  ptable allows the process to be repeatable and consistent.
#'
#' @param data A data.table containing the data to be tabulated and
#' perturbed
#' @param geog A string vector giving the column name in 'data' that
#' contains the desired geography level for the frequency table. This can be
#' the empty vector, c(), if no geography level is required.
#' @param tab_vars A string vector giving the column names in 'data' of
#' the variables to be tabulated.
#' @param record_key_arg A String containing the column name in 'data'
#' giving the record keys required for perturbation.
#' @param ptable A data.table containing the 'ptable' file which determines
#' when perturbation is applied.
#'
#' @return Returns a data.table giving a frequency table which has had cell key
#' perturbation applied according to the ptable supplied.
#'
#' @import data.table
#'
#' @examples
#' geog <- c("var1")
#' tab_vars <- c("var5","var8")
#' record_key <-"record_key"
#'
#' perturbed_table <-
#'  create_perturbed_table(micro, geog, tab_vars, record_key, ptable_10_5)
#'
#' perturbed_table <-create_perturbed_table(data = micro,
#'                                          record_key_arg = "record_key",
#'                                          geog = c(),
#'                                          tab_vars = c("var1","var5","var8"),
#'                                          ptable = ptable_10_5)
#'
#' @export
create_perturbed_table=function(data,geog,tab_vars,record_key_arg,ptable)
{
# Type validation on input data & ptable
if (!is.data.table(data)) {
stop("Specified value for data must be a data.table.")
}
if (!is.data.table(ptable)) {
stop("Specified value for ptable must be a data.table.")
}
# Check that at least one variable specified for geog or tab_vars
if (length(geog)==0 & length(tab_vars)==0)  {
stop("No variables have been specified for tabulation. Please specify a value for geog or tab_vars.")
}
# Check geog, tab_vars & record_key_arg specified are contained within 'data'
if (length(geog)>0){
if (!(geog %in% colnames(data))){
stop("Specified value for geog must be a column name in data.")
}
}
if (length(tab_vars)>0){
if (!all(tab_vars %in% colnames(data))){
stop("Specified values for tab_vars must be column names in data.")
}
}
if (!(record_key_arg %in% colnames(data))){
stop("Specified value for record_key_arg must be a column name in data.")
}
# Check ptable has correct format
if (!all(c("pcv","ckey","pvalue") %in% colnames(ptable))){
stop("Supplied ptable must contain columns called 'pcv','ckey' and 'pvalue'")
}
# Bind variables locally to function to prevent
# 'No visible binding for global variable' during build check
pre_sdc_count <- pcv <- count <- pvalue <- ckey <- NULL
#drop unnecessary columns
data=data[,c(geog,tab_vars,record_key_arg),with=FALSE]
#convert every column to factor, except record_key
cols <- colnames(data)[!(colnames(data) %in% record_key_arg)]
data[,(cols):=lapply(.SD,as.factor),.SDcols=cols]
#tabulate
#using 'table' function to get zero cells
aggregated_table<-as.data.table(table(data[,c(geog,tab_vars),with=FALSE]))
colnames(aggregated_table)[colnames(aggregated_table) == "N"] <- "pre_sdc_count"
print(aggregated_table)
#adjust for using cellkeys of 256 or other (e.g. 4095)
max_ckey<-max(ptable$ckey)
#checking the range of ckeys used in the ptable matches the range of rkeys in the data
max_rkey<-max(data[,get(record_key_arg)])
if(max_ckey!=max_rkey){
warning(paste0("The ranges of record keys and cell keys appear to be different",'\n',
"The maximum record key is ",max_rkey,", whereas the maximum cell key is ",max_ckey),'\n',
"Please check you are using the appropriate ptable for this data")
}
#calculate cell keys
cellkeys<-setDT(data)[,list(ckey = sum(get(record_key_arg))%%(max_ckey+1)), keyby = c(geog,tab_vars)]
print(cellkeys)
aggregated_table<-merge(aggregated_table,cellkeys,by=c(geog,tab_vars),all.x=TRUE)
#calculate pcv
aggregated_table$pcv<-as.integer(((aggregated_table$pre_sdc_count-1)%%250)+501)
setDT(aggregated_table)[pre_sdc_count<=750, pcv:=pre_sdc_count,]
#merge on ptable
aggregated_table<-merge(aggregated_table,ptable,by=c("ckey","pcv"),sort=FALSE,all.x=TRUE)
setDT(aggregated_table)[,count:=pre_sdc_count+pvalue,]
#replacing NAs in cellkey for zero cells
aggregated_table[pre_sdc_count==0,ckey:=0]
#setting pvalue to be zero for zero cells
aggregated_table[pre_sdc_count==0,pvalue:=0]
#setting count to be zero for zero cells
aggregated_table[pre_sdc_count==0,count:=0]
return(aggregated_table)
}
result <- create_perturbed_table(data = micro,
geog = c(),
tab_vars = c("var9"),
record_key_arg = "record_key",
ptable = ptable_10_5)
result <- create_perturbed_table(data = micro,
geog = c("var10"),
tab_vars = c("var10"),
record_key_arg = "record_key",
ptable = ptable_10_5)
result <- create_perturbed_table(data = micro,
geog = c("var10"),
tab_vars = c(),
record_key_arg = "record_key",
ptable = ptable_10_5)
result <- create_perturbed_table(data = micro,
geog = c("var3"),
tab_vars = c(),
record_key_arg = "record_key",
ptable = ptable_10_5)
result <- create_perturbed_table(data = micro,
geog = c(),
tab_vars = c("var3"),
record_key_arg = "record_key",
ptable = ptable_10_5)
result <- create_perturbed_table(data = micro,
geog = c(),
tab_vars = c("var6"),
record_key_arg = "record_key",
ptable = ptable_10_5)
result <- create_perturbed_table(data = micro,
geog = c("var5"),
tab_vars = c("var6"),
record_key_arg = "record_key",
ptable = ptable_10_5)
result <- create_perturbed_table(data = micro,
geog = c("var5"),
tab_vars = c(),
record_key_arg = "record_key",
ptable = ptable_10_5)
result <- create_perturbed_table(data = micro,
geog = c(),
tab_vars = c("var5")),
record_key_arg = "record_key",
ptable = ptable_10_5)
result <- create_perturbed_table(data = micro,
geog = c(),
tab_vars = c("var5"),
record_key_arg = "record_key",
ptable = ptable_10_5)
result <- create_perturbed_table(data = micro,
geog = c(),
tab_vars = c("var5"),
record_key_arg = "record_key",
ptable = ptable_10_5)
library(data.table)
#' Create a frequency table with cell key perturbation applied
#'
#' 'create_perturbed_table()' creates a frequency table which has had
#'  cell key perturbation applied to the counts.
#'  A p-table file needs to be supplied which determines which cells are
#'  perturbed.
#'  The data needs to contain a 'record key' variable which along with the
#'  ptable allows the process to be repeatable and consistent.
#'
#' @param data A data.table containing the data to be tabulated and
#' perturbed
#' @param geog A string vector giving the column name in 'data' that
#' contains the desired geography level for the frequency table. This can be
#' the empty vector, c(), if no geography level is required.
#' @param tab_vars A string vector giving the column names in 'data' of
#' the variables to be tabulated.
#' @param record_key_arg A String containing the column name in 'data'
#' giving the record keys required for perturbation.
#' @param ptable A data.table containing the 'ptable' file which determines
#' when perturbation is applied.
#'
#' @return Returns a data.table giving a frequency table which has had cell key
#' perturbation applied according to the ptable supplied.
#'
#' @import data.table
#'
#' @examples
#' geog <- c("var1")
#' tab_vars <- c("var5","var8")
#' record_key <-"record_key"
#'
#' perturbed_table <-
#'  create_perturbed_table(micro, geog, tab_vars, record_key, ptable_10_5)
#'
#' perturbed_table <-create_perturbed_table(data = micro,
#'                                          record_key_arg = "record_key",
#'                                          geog = c(),
#'                                          tab_vars = c("var1","var5","var8"),
#'                                          ptable = ptable_10_5)
#'
#' @export
create_perturbed_table=function(data,geog,tab_vars,record_key_arg,ptable)
{
# Type validation on input data & ptable
if (!is.data.table(data)) {
stop("Specified value for data must be a data.table.")
}
if (!is.data.table(ptable)) {
stop("Specified value for ptable must be a data.table.")
}
# Check that at least one variable specified for geog or tab_vars
if (length(geog)==0 & length(tab_vars)==0)  {
stop("No variables have been specified for tabulation. Please specify a value for geog or tab_vars.")
}
# Check geog, tab_vars & record_key_arg specified are contained within 'data'
if (length(geog)>0){
if (!(geog %in% colnames(data))){
stop("Specified value for geog must be a column name in data.")
}
}
if (length(tab_vars)>0){
if (!all(tab_vars %in% colnames(data))){
stop("Specified values for tab_vars must be column names in data.")
}
}
if (!(record_key_arg %in% colnames(data))){
stop("Specified value for record_key_arg must be a column name in data.")
}
# Check ptable has correct format
if (!all(c("pcv","ckey","pvalue") %in% colnames(ptable))){
stop("Supplied ptable must contain columns called 'pcv','ckey' and 'pvalue'")
}
# Bind variables locally to function to prevent
# 'No visible binding for global variable' during build check
pre_sdc_count <- pcv <- count <- pvalue <- ckey <- NULL
#drop unnecessary columns
data=data[,c(geog,tab_vars,record_key_arg),with=FALSE]
#convert every column to factor, except record_key
cols <- colnames(data)[!(colnames(data) %in% record_key_arg)]
data[,(cols):=lapply(.SD,as.factor),.SDcols=cols]
#tabulate
#using 'table' function to get zero cells
aggregated_table<-as.data.table(table(data[,c(geog,tab_vars),with=FALSE]))
colnames(aggregated_table)[colnames(aggregated_table) == "N"] <- "pre_sdc_count"
print("aggregated_table")
print(aggregated_table)
#adjust for using cellkeys of 256 or other (e.g. 4095)
max_ckey<-max(ptable$ckey)
#checking the range of ckeys used in the ptable matches the range of rkeys in the data
max_rkey<-max(data[,get(record_key_arg)])
if(max_ckey!=max_rkey){
warning(paste0("The ranges of record keys and cell keys appear to be different",'\n',
"The maximum record key is ",max_rkey,", whereas the maximum cell key is ",max_ckey),'\n',
"Please check you are using the appropriate ptable for this data")
}
#calculate cell keys
cellkeys<-setDT(data)[,list(ckey = sum(get(record_key_arg))%%(max_ckey+1)), keyby = c(geog,tab_vars)]
print("cellkeys")
print(cellkeys)
aggregated_table<-merge(aggregated_table,cellkeys,by=c(geog,tab_vars),all.x=TRUE)
#calculate pcv
aggregated_table$pcv<-as.integer(((aggregated_table$pre_sdc_count-1)%%250)+501)
setDT(aggregated_table)[pre_sdc_count<=750, pcv:=pre_sdc_count,]
#merge on ptable
aggregated_table<-merge(aggregated_table,ptable,by=c("ckey","pcv"),sort=FALSE,all.x=TRUE)
setDT(aggregated_table)[,count:=pre_sdc_count+pvalue,]
#replacing NAs in cellkey for zero cells
aggregated_table[pre_sdc_count==0,ckey:=0]
#setting pvalue to be zero for zero cells
aggregated_table[pre_sdc_count==0,pvalue:=0]
#setting count to be zero for zero cells
aggregated_table[pre_sdc_count==0,count:=0]
return(aggregated_table)
}
result <- create_perturbed_table(data = micro,
geog = c(),
tab_vars = c("var5"),
record_key_arg = "record_key",
ptable = ptable_10_5)
library(cellkeyperturbation)
devtools::load_all(".")
devtools::build_readme()
devtools::build_readme()
use_readme_rmd()
usethis::use_readme_rmd()
library(devtools)
devtools::build_readme()
library(data.table)
#' Create a frequency table with cell key perturbation applied
#'
#' 'create_perturbed_table()' creates a frequency table which has had
#'  cell key perturbation applied to the counts.
#'  A p-table file needs to be supplied which determines which cells are
#'  perturbed.
#'  The data needs to contain a 'record key' variable which along with the
#'  ptable allows the process to be repeatable and consistent.
#'
#' @param data A data.table containing the data to be tabulated and
#' perturbed
#' @param geog A string vector giving the column name in 'data' that
#' contains the desired geography level for the frequency table. This can be
#' the empty vector, c(), if no geography level is required.
#' @param tab_vars A string vector giving the column names in 'data' of
#' the variables to be tabulated.
#' @param record_key_arg A String containing the column name in 'data'
#' giving the record keys required for perturbation.
#' @param ptable A data.table containing the 'ptable' file which determines
#' when perturbation is applied.
#'
#' @return Returns a data.table giving a frequency table which has had cell key
#' perturbation applied according to the ptable supplied.
#'
#' @import data.table
#'
#' @examples
#' geog <- c("var1")
#' tab_vars <- c("var5","var8")
#' record_key <-"record_key"
#'
#' perturbed_table <-
#'  create_perturbed_table(micro, geog, tab_vars, record_key, ptable_10_5)
#'
#' perturbed_table <-create_perturbed_table(data = micro,
#'                                          record_key_arg = "record_key",
#'                                          geog = c(),
#'                                          tab_vars = c("var1","var5","var8"),
#'                                          ptable = ptable_10_5)
#'
#' @export
create_perturbed_table=function(data,geog,tab_vars,record_key_arg,ptable)
{
# Type validation on input data & ptable
if (!is.data.table(data)) {
stop("Specified value for data must be a data.table.")
}
if (!is.data.table(ptable)) {
stop("Specified value for ptable must be a data.table.")
}
# Check that at least one variable specified for geog or tab_vars
if (length(geog)==0 & length(tab_vars)==0)  {
stop("No variables have been specified for tabulation. Please specify a value for geog or tab_vars.")
}
# Check geog, tab_vars & record_key_arg specified are contained within 'data'
if (length(geog)>0){
if (!(geog %in% colnames(data))){
stop("Specified value for geog must be a column name in data.")
}
}
if (length(tab_vars)>0){
if (!all(tab_vars %in% colnames(data))){
stop("Specified values for tab_vars must be column names in data.")
}
}
if (!(record_key_arg %in% colnames(data))){
stop("Specified value for record_key_arg must be a column name in data.")
}
# Check ptable has correct format
if (!all(c("pcv","ckey","pvalue") %in% colnames(ptable))){
stop("Supplied ptable must contain columns called 'pcv','ckey' and 'pvalue'")
}
# Bind variables locally to function to prevent
# 'No visible binding for global variable' during build check
pre_sdc_count <- pcv <- count <- pvalue <- ckey <- NULL
#drop unnecessary columns
data=data[,c(geog,tab_vars,record_key_arg),with=FALSE]
#convert every column to factor, except record_key
cols <- colnames(data)[!(colnames(data) %in% record_key_arg)]
data[,(cols):=lapply(.SD,as.factor),.SDcols=cols]
#tabulate
#using 'table' function to get zero cells
aggregated_table<-as.data.table(table(data[,c(geog,tab_vars),with=FALSE]))
colnames(aggregated_table)[colnames(aggregated_table) == "N"] <- "pre_sdc_count"
#adjust for using cellkeys of 256 or other (e.g. 4095)
max_ckey<-max(ptable$ckey)
#checking the range of ckeys used in the ptable matches the range of rkeys in the data
max_rkey<-max(data[,get(record_key_arg)])
if(max_ckey!=max_rkey){
warning(paste0("The ranges of record keys and cell keys appear to be different",'\n',
"The maximum record key is ",max_rkey,", whereas the maximum cell key is ",max_ckey),'\n',
"Please check you are using the appropriate ptable for this data")
}
#calculate cell keys
cellkeys<-setDT(data)[,list(ckey = sum(get(record_key_arg))%%(max_ckey+1)), keyby = c(geog,tab_vars)]
aggregated_table<-merge(aggregated_table,cellkeys,by=c(geog,tab_vars),all.x=TRUE)
#calculate pcv
aggregated_table$pcv<-as.integer(((aggregated_table$pre_sdc_count-1)%%250)+501)
setDT(aggregated_table)[pre_sdc_count<=750, pcv:=pre_sdc_count,]
#merge on ptable
aggregated_table<-merge(aggregated_table,ptable,by=c("ckey","pcv"),sort=FALSE,all.x=TRUE)
setDT(aggregated_table)[,count:=pre_sdc_count+pvalue,]
#replacing NAs in cellkey for zero cells
aggregated_table[pre_sdc_count==0,ckey:=0]
#setting pvalue to be zero for zero cells
aggregated_table[pre_sdc_count==0,pvalue:=0]
#setting count to be zero for zero cells
aggregated_table[pre_sdc_count==0,count:=0]
return(aggregated_table)
}
geog <- c("var1")
tab_vars <- c("var5","var8")
record_key <-"record_key"
result <- create_perturbed_table(micro, geog, tab_vars, record_key, ptable_10_5)
geog <- c("var1")
tab_vars <- c("var5","var8")
record_key <-"record_key"
result <- create_perturbed_table(micro, geog, tab_vars, record_key, ptable_10_5)
micro <- fread("data/micro.csv")
ptable_10_5 <- fread("data/ptable_10_5_rule.csv")
devtools::load_all(".")
perturbed_table <-create_perturbed_table(data = micro,
record_key_arg = "record_key",
geog = c(),
tab_vars = c(var5","var8"),
ptable = ptable_10_5)
geog <- c("var1")
tab_vars <- c("var5","var8")
record_key <-"record_key"
result <- create_perturbed_table(micro, geog, tab_vars, record_key, ptable_10_5)
geog <- c()
result <- create_perturbed_table(micro, geog, tab_vars, record_key, ptable_10_5)
tab_vars <- c("var5")
result <- create_perturbed_table(micro, geog, tab_vars, record_key, ptable_10_5)
devtools::load_all(".")
library(cellkeyperturbation)
geog <- c()
tab_vars <- c("var5")
record_key <-"record_key"
geog <- c()
result <- create_perturbed_table(micro, geog, tab_vars, record_key, ptable_10_5)
devtools::load_all(".")
result <- create_perturbed_table(micro, geog, tab_vars, record_key, ptable_10_5)
devtools::load_all(".")
result <- create_perturbed_table(micro, geog, tab_vars, record_key, ptable_10_5)
devtools::load_all(".")
result <- create_perturbed_table(micro, geog, tab_vars, record_key, ptable_10_5)
devtools::load_all(".")
result <- create_perturbed_table(micro, geog, tab_vars, record_key, ptable_10_5)
devtools::load_all(".")
result <- create_perturbed_table(micro, geog, tab_vars, record_key, ptable_10_5)
devtools::load_all(".")
result <- create_perturbed_table(micro, geog, tab_vars, record_key, ptable_10_5)
devtools::load_all(".")
library(cellkeyperturbation)
devtools::load_all(".")
geog <- c()
tab_vars <- c("var5")
record_key <-"record_key"
result <- create_perturbed_table(micro, geog, tab_vars, record_key, ptable_10_5)
View(result)
View(result)
geog <- c("var2")
tab_vars <- c("var5")
record_key <-"record_key"
result <- create_perturbed_table(micro, geog, tab_vars, record_key, ptable_10_5)
geog <- c()
tab_vars <- c("var2")
result <- create_perturbed_table(micro, geog, tab_vars, record_key, ptable_10_5)
View(result)
devtools::load_all(".")
result <- create_perturbed_table(micro, geog, tab_vars, record_key, ptable_10_5)
geog <- c()
tab_vars <- c("var10")
result <- create_perturbed_table(micro, geog, tab_vars, record_key, ptable_10_5)
geog <- c()
tab_vars <- c("var5","var6")
result <- create_perturbed_table(micro, geog, tab_vars, record_key, ptable_10_5)
library(cellkeyperturbation)
geog <- c()
tab_vars <- c()
result <- create_perturbed_table(micro, geog, tab_vars, record_key, ptable_10_5)
devtools::load_all(".")
geog <- c()
tab_vars <- c()
result <- create_perturbed_table(micro, geog, tab_vars, record_key, ptable_10_5)
library(cellkeyperturbation)
